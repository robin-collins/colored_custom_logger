{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Colored Custom Logger Colored Custom Logger is a Python module that extends the functionality of the built-in logging module to provide colorized log output. It's designed to make log messages more readable and distinguishable, especially when working with console output. Features Colorized log output for improved readability Easy to integrate with existing Python projects Customizable color schemes Support for both console and file logging Compatible with Python's built-in logging module Quick Start Get started with Colored Custom Logger in just a few lines of code: from colored_custom_logger import CustomLogger logger = CustomLogger.get_logger(__name__) logger.debug(\"This is a debug message\") logger.info(\"This is an info message\") logger.warning(\"This is a warning message\") logger.error(\"This is an error message\") logger.critical(\"This is a critical message\") Navigation Use the navigation menu to explore different sections of the documentation: Installation : Learn how to install Colored Custom Logger Usage : Detailed guide on how to use the module API Reference : Complete API documentation Getting Help If you encounter any issues or have questions, please check our Troubleshooting section or open an issue on our GitHub repository . Thank you for using Colored Custom Logger!","title":"Home"},{"location":"#welcome-to-colored-custom-logger","text":"Colored Custom Logger is a Python module that extends the functionality of the built-in logging module to provide colorized log output. It's designed to make log messages more readable and distinguishable, especially when working with console output.","title":"Welcome to Colored Custom Logger"},{"location":"#features","text":"Colorized log output for improved readability Easy to integrate with existing Python projects Customizable color schemes Support for both console and file logging Compatible with Python's built-in logging module","title":"Features"},{"location":"#quick-start","text":"Get started with Colored Custom Logger in just a few lines of code: from colored_custom_logger import CustomLogger logger = CustomLogger.get_logger(__name__) logger.debug(\"This is a debug message\") logger.info(\"This is an info message\") logger.warning(\"This is a warning message\") logger.error(\"This is an error message\") logger.critical(\"This is a critical message\")","title":"Quick Start"},{"location":"#navigation","text":"Use the navigation menu to explore different sections of the documentation: Installation : Learn how to install Colored Custom Logger Usage : Detailed guide on how to use the module API Reference : Complete API documentation","title":"Navigation"},{"location":"#getting-help","text":"If you encounter any issues or have questions, please check our Troubleshooting section or open an issue on our GitHub repository . Thank you for using Colored Custom Logger!","title":"Getting Help"},{"location":"api/","text":"API Reference This document provides a detailed reference for all public classes, methods, and attributes in the colored_custom_logger module. Table of Contents CustomLogger ColoredFormatter Utility Functions CustomLogger CustomLogger is the main class you'll interact with. It's a subclass of logging.Logger that uses a ColoredFormatter by default. Class Definition class CustomLogger(logging.Logger): def __init__(self, name: str, level: int = logging.DEBUG) Class Methods get_logger @classmethod def get_logger(cls, name: str, level: int = logging.DEBUG) -> CustomLogger Creates and returns a CustomLogger instance. Parameters: - name (str): The name of the logger. - level (int, optional): The logging level. Defaults to logging.DEBUG . Returns: - CustomLogger : An instance of the CustomLogger. Example: logger = CustomLogger.get_logger(\"my_app\") Instance Methods setup_logger def setup_logger(self) -> None Sets up the logger with a ColoredFormatter and console handler. Example: logger = CustomLogger(\"my_app\") logger.setup_logger() Standard Logging Methods The CustomLogger class inherits all standard logging methods from logging.Logger . These include: debug(msg, *args, **kwargs) info(msg, *args, **kwargs) warning(msg, *args, **kwargs) error(msg, *args, **kwargs) critical(msg, *args, **kwargs) exception(msg, *args, exc_info=True, **kwargs) Each of these methods logs a message with the corresponding severity level. Parameters: - msg (str): The message to log. - *args : Variable positional arguments to be merged into msg . - **kwargs : Keyword arguments. These can include exc_info (a boolean, exception, or tuple) and stack_info (a boolean). Example: logger.debug(\"Debug message\") logger.info(\"Info message with %s\", \"formatting\") logger.warning(\"Warning message\") logger.error(\"Error message\") logger.critical(\"Critical message\") logger.exception(\"Exception message\", exc_info=True) ColoredFormatter ColoredFormatter is a custom formatter that applies colors to log messages based on their level. Class Definition class ColoredFormatter(logging.Formatter): def __init__(self, fmt: Optional[str] = None, datefmt: Optional[str] = None, style: str = '%') Class Attributes COLORS A dictionary mapping log levels to color codes. COLORS = { \"DEBUG\": Fore.BLUE, \"INFO\": Fore.GREEN, \"WARNING\": Fore.YELLOW, \"ERROR\": Fore.RED, \"CRITICAL\": Fore.RED + Style.BRIGHT, } Instance Methods format def format(self, record: logging.LogRecord) -> str Formats the log record with appropriate colors. Parameters: - record (logging.LogRecord): The log record to format. Returns: - str : The formatted log message with color codes. Example: formatter = ColoredFormatter(\"%(asctime)s - %(levelname)s - %(message)s\") formatted_message = formatter.format(log_record) Utility Functions init_logger def init_logger(name: str, level: int = logging.DEBUG) -> CustomLogger A convenience function to initialize and return a CustomLogger . Parameters: - name (str): The name of the logger. - level (int, optional): The logging level. Defaults to logging.DEBUG . Returns: - CustomLogger : An initialized CustomLogger instance. Example: logger = init_logger(\"my_app\", level=logging.INFO) Constants Log Levels The module uses standard Python logging levels: DEBUG = 10 INFO = 20 WARNING = 30 ERROR = 40 CRITICAL = 50 These can be imported from the logging module or accessed via logging.DEBUG , logging.INFO , etc. Best Practices Use meaningful logger names, typically __name__ or the name of the component. Set appropriate log levels for different environments (e.g., DEBUG for development, INFO for production). Use log messages to provide context, not just to state what code is executing. When adding custom colors to messages, always reset the color afterwards using Style.RESET_ALL . Thread Safety The CustomLogger and ColoredFormatter classes are thread-safe, inheriting this property from the standard logging module. However, be cautious when modifying global state (like changing log levels) in a multi-threaded environment. Performance Considerations Logging can impact performance, especially at DEBUG level. In production environments, consider setting the log level to INFO or higher for optimal performance. Extending the Module To extend the functionality of colored_custom_logger : Subclass CustomLogger or ColoredFormatter to add new features. Create custom handlers if you need special output behavior. Modify the COLORS dictionary in ColoredFormatter to change default colors. Remember to maintain backwards compatibility if you're extending the public API. This API reference provides a comprehensive overview of the colored_custom_logger module. For usage examples and more context, please refer to the Usage Guide .","title":"API Reference"},{"location":"api/#api-reference","text":"This document provides a detailed reference for all public classes, methods, and attributes in the colored_custom_logger module.","title":"API Reference"},{"location":"api/#table-of-contents","text":"CustomLogger ColoredFormatter Utility Functions","title":"Table of Contents"},{"location":"api/#customlogger","text":"CustomLogger is the main class you'll interact with. It's a subclass of logging.Logger that uses a ColoredFormatter by default.","title":"CustomLogger"},{"location":"api/#class-definition","text":"class CustomLogger(logging.Logger): def __init__(self, name: str, level: int = logging.DEBUG)","title":"Class Definition"},{"location":"api/#class-methods","text":"","title":"Class Methods"},{"location":"api/#get_logger","text":"@classmethod def get_logger(cls, name: str, level: int = logging.DEBUG) -> CustomLogger Creates and returns a CustomLogger instance. Parameters: - name (str): The name of the logger. - level (int, optional): The logging level. Defaults to logging.DEBUG . Returns: - CustomLogger : An instance of the CustomLogger. Example: logger = CustomLogger.get_logger(\"my_app\")","title":"get_logger"},{"location":"api/#instance-methods","text":"","title":"Instance Methods"},{"location":"api/#setup_logger","text":"def setup_logger(self) -> None Sets up the logger with a ColoredFormatter and console handler. Example: logger = CustomLogger(\"my_app\") logger.setup_logger()","title":"setup_logger"},{"location":"api/#standard-logging-methods","text":"The CustomLogger class inherits all standard logging methods from logging.Logger . These include: debug(msg, *args, **kwargs) info(msg, *args, **kwargs) warning(msg, *args, **kwargs) error(msg, *args, **kwargs) critical(msg, *args, **kwargs) exception(msg, *args, exc_info=True, **kwargs) Each of these methods logs a message with the corresponding severity level. Parameters: - msg (str): The message to log. - *args : Variable positional arguments to be merged into msg . - **kwargs : Keyword arguments. These can include exc_info (a boolean, exception, or tuple) and stack_info (a boolean). Example: logger.debug(\"Debug message\") logger.info(\"Info message with %s\", \"formatting\") logger.warning(\"Warning message\") logger.error(\"Error message\") logger.critical(\"Critical message\") logger.exception(\"Exception message\", exc_info=True)","title":"Standard Logging Methods"},{"location":"api/#coloredformatter","text":"ColoredFormatter is a custom formatter that applies colors to log messages based on their level.","title":"ColoredFormatter"},{"location":"api/#class-definition_1","text":"class ColoredFormatter(logging.Formatter): def __init__(self, fmt: Optional[str] = None, datefmt: Optional[str] = None, style: str = '%')","title":"Class Definition"},{"location":"api/#class-attributes","text":"","title":"Class Attributes"},{"location":"api/#colors","text":"A dictionary mapping log levels to color codes. COLORS = { \"DEBUG\": Fore.BLUE, \"INFO\": Fore.GREEN, \"WARNING\": Fore.YELLOW, \"ERROR\": Fore.RED, \"CRITICAL\": Fore.RED + Style.BRIGHT, }","title":"COLORS"},{"location":"api/#instance-methods_1","text":"","title":"Instance Methods"},{"location":"api/#format","text":"def format(self, record: logging.LogRecord) -> str Formats the log record with appropriate colors. Parameters: - record (logging.LogRecord): The log record to format. Returns: - str : The formatted log message with color codes. Example: formatter = ColoredFormatter(\"%(asctime)s - %(levelname)s - %(message)s\") formatted_message = formatter.format(log_record)","title":"format"},{"location":"api/#utility-functions","text":"","title":"Utility Functions"},{"location":"api/#init_logger","text":"def init_logger(name: str, level: int = logging.DEBUG) -> CustomLogger A convenience function to initialize and return a CustomLogger . Parameters: - name (str): The name of the logger. - level (int, optional): The logging level. Defaults to logging.DEBUG . Returns: - CustomLogger : An initialized CustomLogger instance. Example: logger = init_logger(\"my_app\", level=logging.INFO)","title":"init_logger"},{"location":"api/#constants","text":"","title":"Constants"},{"location":"api/#log-levels","text":"The module uses standard Python logging levels: DEBUG = 10 INFO = 20 WARNING = 30 ERROR = 40 CRITICAL = 50 These can be imported from the logging module or accessed via logging.DEBUG , logging.INFO , etc.","title":"Log Levels"},{"location":"api/#best-practices","text":"Use meaningful logger names, typically __name__ or the name of the component. Set appropriate log levels for different environments (e.g., DEBUG for development, INFO for production). Use log messages to provide context, not just to state what code is executing. When adding custom colors to messages, always reset the color afterwards using Style.RESET_ALL .","title":"Best Practices"},{"location":"api/#thread-safety","text":"The CustomLogger and ColoredFormatter classes are thread-safe, inheriting this property from the standard logging module. However, be cautious when modifying global state (like changing log levels) in a multi-threaded environment.","title":"Thread Safety"},{"location":"api/#performance-considerations","text":"Logging can impact performance, especially at DEBUG level. In production environments, consider setting the log level to INFO or higher for optimal performance.","title":"Performance Considerations"},{"location":"api/#extending-the-module","text":"To extend the functionality of colored_custom_logger : Subclass CustomLogger or ColoredFormatter to add new features. Create custom handlers if you need special output behavior. Modify the COLORS dictionary in ColoredFormatter to change default colors. Remember to maintain backwards compatibility if you're extending the public API. This API reference provides a comprehensive overview of the colored_custom_logger module. For usage examples and more context, please refer to the Usage Guide .","title":"Extending the Module"},{"location":"installation/","text":"Installation Guide This guide will walk you through the process of installing the colored_custom_logger module in your Python environment. Prerequisites Before installing colored_custom_logger , ensure you have the following: Python 3.7 or higher installed on your system pip (Python package installer) installed You can check your Python version by running: python --version Installation Steps 1. Install using pip The easiest way to install colored_custom_logger is using pip. Open your terminal or command prompt and run: pip install colored-custom-logger This command will download and install the latest version of colored_custom_logger along with its dependencies. 2. Verify the Installation After the installation is complete, you can verify it by importing the module in Python: from colored_custom_logger import CustomLogger # If no error occurs, the installation was successful Installing from Source If you prefer to install from source or want to contribute to the development: Clone the repository: bash git clone https://github.com/robin-collins/colored_custom_logger.git Navigate to the project directory: bash cd colored_custom_logger Install the package in editable mode: bash pip install -e . Dependencies colored_custom_logger depends on the following packages: colorama These dependencies will be automatically installed when you install colored_custom_logger using pip. Troubleshooting If you encounter any issues during installation: Ensure you have the latest version of pip: bash pip install --upgrade pip If you're using a virtual environment, make sure it's activated before installation. On some systems, you might need to use pip3 instead of pip to ensure you're using Python 3. bash pip3 install colored-custom-logger If you encounter permission errors, you may need to use sudo (on Unix-based systems) or run your command prompt as administrator (on Windows). Next Steps After installation, you're ready to start using colored_custom_logger in your projects. Check out the Usage Guide for examples and best practices. For any further issues or questions, please open an issue on our GitHub repository.","title":"Installation"},{"location":"installation/#installation-guide","text":"This guide will walk you through the process of installing the colored_custom_logger module in your Python environment.","title":"Installation Guide"},{"location":"installation/#prerequisites","text":"Before installing colored_custom_logger , ensure you have the following: Python 3.7 or higher installed on your system pip (Python package installer) installed You can check your Python version by running: python --version","title":"Prerequisites"},{"location":"installation/#installation-steps","text":"","title":"Installation Steps"},{"location":"installation/#1-install-using-pip","text":"The easiest way to install colored_custom_logger is using pip. Open your terminal or command prompt and run: pip install colored-custom-logger This command will download and install the latest version of colored_custom_logger along with its dependencies.","title":"1. Install using pip"},{"location":"installation/#2-verify-the-installation","text":"After the installation is complete, you can verify it by importing the module in Python: from colored_custom_logger import CustomLogger # If no error occurs, the installation was successful","title":"2. Verify the Installation"},{"location":"installation/#installing-from-source","text":"If you prefer to install from source or want to contribute to the development: Clone the repository: bash git clone https://github.com/robin-collins/colored_custom_logger.git Navigate to the project directory: bash cd colored_custom_logger Install the package in editable mode: bash pip install -e .","title":"Installing from Source"},{"location":"installation/#dependencies","text":"colored_custom_logger depends on the following packages: colorama These dependencies will be automatically installed when you install colored_custom_logger using pip.","title":"Dependencies"},{"location":"installation/#troubleshooting","text":"If you encounter any issues during installation: Ensure you have the latest version of pip: bash pip install --upgrade pip If you're using a virtual environment, make sure it's activated before installation. On some systems, you might need to use pip3 instead of pip to ensure you're using Python 3. bash pip3 install colored-custom-logger If you encounter permission errors, you may need to use sudo (on Unix-based systems) or run your command prompt as administrator (on Windows).","title":"Troubleshooting"},{"location":"installation/#next-steps","text":"After installation, you're ready to start using colored_custom_logger in your projects. Check out the Usage Guide for examples and best practices. For any further issues or questions, please open an issue on our GitHub repository.","title":"Next Steps"},{"location":"usage/","text":"Usage Guide This guide provides comprehensive examples of how to use the colored_custom_logger module in your Python projects. From basic setup to advanced features, you'll find everything you need to make the most of colored logging in your applications. Table of Contents Usage Guide Table of Contents Basic Usage Customizing Log Levels Using Custom Colors Multiple Loggers Logging to Files Advanced Formatting Context Managers Integration with Existing Projects Basic Usage To get started with colored_custom_logger , follow these simple steps: Import the CustomLogger class: from colored_custom_logger import CustomLogger Create a logger instance: logger = CustomLogger.get_logger(__name__) Start logging messages: logger.debug(\"This is a debug message\") logger.info(\"This is an info message\") logger.warning(\"This is a warning message\") logger.error(\"This is an error message\") logger.critical(\"This is a critical message\") Here's how the output might look: [SCREENSHOT_PLACEHOLDER: basic_usage.png] Customizing Log Levels You can customize the log level to control which messages are displayed: import logging from colored_custom_logger import CustomLogger logger = CustomLogger.get_logger(__name__, level=logging.INFO) logger.debug(\"This debug message won't be displayed\") logger.info(\"This info message will be displayed\") logger.warning(\"This warning message will be displayed\") You can also change the log level dynamically: logger.setLevel(logging.DEBUG) logger.debug(\"Now this debug message will be displayed\") [SCREENSHOT_PLACEHOLDER: custom_log_levels.png] Using Custom Colors You can incorporate custom colors into your log messages using the colorama library: from colored_custom_logger import CustomLogger from colorama import Fore, Back, Style logger = CustomLogger.get_logger(__name__) logger.info(f\"This message has {Fore.BLUE}blue text{Style.RESET_ALL}\") logger.warning(f\"This is a {Fore.MAGENTA}magenta warning{Style.RESET_ALL}\") logger.error(f\"Error! {Back.WHITE}{Fore.RED}Something went wrong!{Style.RESET_ALL}\") [SCREENSHOT_PLACEHOLDER: custom_colors.png] Multiple Loggers For larger applications, you might want to use multiple loggers: main_logger = CustomLogger.get_logger(\"main\") db_logger = CustomLogger.get_logger(\"database\") api_logger = CustomLogger.get_logger(\"api\") main_logger.info(\"Application starting\") db_logger.debug(\"Connecting to database\") api_logger.warning(\"API rate limit approaching\") [SCREENSHOT_PLACEHOLDER: multiple_loggers.png] Logging to Files You can configure your logger to write to a file in addition to the console: import logging from colored_custom_logger import CustomLogger logger = CustomLogger.get_logger(__name__) # Create a file handler file_handler = logging.FileHandler(\"app.log\") file_handler.setLevel(logging.DEBUG) # Create a formatting for the file logs file_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s') file_handler.setFormatter(file_formatter) # Add the file handler to the logger logger.addHandler(file_handler) logger.debug(\"This message will go to both console and file\") logger.info(\"So will this info message\") [SCREENSHOT_PLACEHOLDER: file_logging.png] Advanced Formatting You can create custom formats for your log messages: from colored_custom_logger import CustomLogger, ColoredFormatter import logging logger = CustomLogger.get_logger(__name__) custom_formatter = ColoredFormatter( fmt=\"%(asctime)s | %(levelname)8s | %(name)s | %(message)s\", datefmt=\"%Y-%m-%d %H:%M:%S\" ) # Assuming the first handler is the console handler console_handler = logger.handlers[0] console_handler.setFormatter(custom_formatter) logger.info(\"This message uses the custom format\") logger.warning(\"So does this warning message\") [SCREENSHOT_PLACEHOLDER: advanced_formatting.png] Context Managers You can use context managers to temporarily change logging behavior: from colored_custom_logger import CustomLogger import logging from contextlib import contextmanager logger = CustomLogger.get_logger(__name__, level=logging.INFO) @contextmanager def temporary_loglevel(temp_level): original_level = logger.level logger.setLevel(temp_level) try: yield finally: logger.setLevel(original_level) logger.debug(\"This debug message won't appear\") with temporary_loglevel(logging.DEBUG): logger.debug(\"This debug message will appear\") logger.debug(\"This debug message won't appear again\") [SCREENSHOT_PLACEHOLDER: context_managers.png] Integration with Existing Projects If you're integrating colored_custom_logger into an existing project, you might need to configure it to work with other logging setups: import logging from colored_custom_logger import CustomLogger, ColoredFormatter # Configure the root logger logging.basicConfig(level=logging.INFO) # Create a colored formatter colored_formatter = ColoredFormatter() # Get the root logger and add a colored console handler root_logger = logging.getLogger() console_handler = logging.StreamHandler() console_handler.setFormatter(colored_formatter) root_logger.addHandler(console_handler) # Now you can create loggers as usual, and they'll use the colored formatter logger = logging.getLogger(__name__) logger.info(\"This message will be colored\") # You can still create CustomLogger instances for specific modules custom_logger = CustomLogger.get_logger(\"custom_module\") custom_logger.warning(\"This warning uses CustomLogger directly\") [SCREENSHOT_PLACEHOLDER: integration.png] By following these examples, you should be able to make full use of the colored_custom_logger in your Python projects. Remember to adjust the log levels and formats to best suit your specific needs. For more detailed information about the CustomLogger and ColoredFormatter classes, check out the API Reference .","title":"Usage"},{"location":"usage/#usage-guide","text":"This guide provides comprehensive examples of how to use the colored_custom_logger module in your Python projects. From basic setup to advanced features, you'll find everything you need to make the most of colored logging in your applications.","title":"Usage Guide"},{"location":"usage/#table-of-contents","text":"Usage Guide Table of Contents Basic Usage Customizing Log Levels Using Custom Colors Multiple Loggers Logging to Files Advanced Formatting Context Managers Integration with Existing Projects","title":"Table of Contents"},{"location":"usage/#basic-usage","text":"To get started with colored_custom_logger , follow these simple steps: Import the CustomLogger class: from colored_custom_logger import CustomLogger Create a logger instance: logger = CustomLogger.get_logger(__name__) Start logging messages: logger.debug(\"This is a debug message\") logger.info(\"This is an info message\") logger.warning(\"This is a warning message\") logger.error(\"This is an error message\") logger.critical(\"This is a critical message\") Here's how the output might look: [SCREENSHOT_PLACEHOLDER: basic_usage.png]","title":"Basic Usage"},{"location":"usage/#customizing-log-levels","text":"You can customize the log level to control which messages are displayed: import logging from colored_custom_logger import CustomLogger logger = CustomLogger.get_logger(__name__, level=logging.INFO) logger.debug(\"This debug message won't be displayed\") logger.info(\"This info message will be displayed\") logger.warning(\"This warning message will be displayed\") You can also change the log level dynamically: logger.setLevel(logging.DEBUG) logger.debug(\"Now this debug message will be displayed\") [SCREENSHOT_PLACEHOLDER: custom_log_levels.png]","title":"Customizing Log Levels"},{"location":"usage/#using-custom-colors","text":"You can incorporate custom colors into your log messages using the colorama library: from colored_custom_logger import CustomLogger from colorama import Fore, Back, Style logger = CustomLogger.get_logger(__name__) logger.info(f\"This message has {Fore.BLUE}blue text{Style.RESET_ALL}\") logger.warning(f\"This is a {Fore.MAGENTA}magenta warning{Style.RESET_ALL}\") logger.error(f\"Error! {Back.WHITE}{Fore.RED}Something went wrong!{Style.RESET_ALL}\") [SCREENSHOT_PLACEHOLDER: custom_colors.png]","title":"Using Custom Colors"},{"location":"usage/#multiple-loggers","text":"For larger applications, you might want to use multiple loggers: main_logger = CustomLogger.get_logger(\"main\") db_logger = CustomLogger.get_logger(\"database\") api_logger = CustomLogger.get_logger(\"api\") main_logger.info(\"Application starting\") db_logger.debug(\"Connecting to database\") api_logger.warning(\"API rate limit approaching\") [SCREENSHOT_PLACEHOLDER: multiple_loggers.png]","title":"Multiple Loggers"},{"location":"usage/#logging-to-files","text":"You can configure your logger to write to a file in addition to the console: import logging from colored_custom_logger import CustomLogger logger = CustomLogger.get_logger(__name__) # Create a file handler file_handler = logging.FileHandler(\"app.log\") file_handler.setLevel(logging.DEBUG) # Create a formatting for the file logs file_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s') file_handler.setFormatter(file_formatter) # Add the file handler to the logger logger.addHandler(file_handler) logger.debug(\"This message will go to both console and file\") logger.info(\"So will this info message\") [SCREENSHOT_PLACEHOLDER: file_logging.png]","title":"Logging to Files"},{"location":"usage/#advanced-formatting","text":"You can create custom formats for your log messages: from colored_custom_logger import CustomLogger, ColoredFormatter import logging logger = CustomLogger.get_logger(__name__) custom_formatter = ColoredFormatter( fmt=\"%(asctime)s | %(levelname)8s | %(name)s | %(message)s\", datefmt=\"%Y-%m-%d %H:%M:%S\" ) # Assuming the first handler is the console handler console_handler = logger.handlers[0] console_handler.setFormatter(custom_formatter) logger.info(\"This message uses the custom format\") logger.warning(\"So does this warning message\") [SCREENSHOT_PLACEHOLDER: advanced_formatting.png]","title":"Advanced Formatting"},{"location":"usage/#context-managers","text":"You can use context managers to temporarily change logging behavior: from colored_custom_logger import CustomLogger import logging from contextlib import contextmanager logger = CustomLogger.get_logger(__name__, level=logging.INFO) @contextmanager def temporary_loglevel(temp_level): original_level = logger.level logger.setLevel(temp_level) try: yield finally: logger.setLevel(original_level) logger.debug(\"This debug message won't appear\") with temporary_loglevel(logging.DEBUG): logger.debug(\"This debug message will appear\") logger.debug(\"This debug message won't appear again\") [SCREENSHOT_PLACEHOLDER: context_managers.png]","title":"Context Managers"},{"location":"usage/#integration-with-existing-projects","text":"If you're integrating colored_custom_logger into an existing project, you might need to configure it to work with other logging setups: import logging from colored_custom_logger import CustomLogger, ColoredFormatter # Configure the root logger logging.basicConfig(level=logging.INFO) # Create a colored formatter colored_formatter = ColoredFormatter() # Get the root logger and add a colored console handler root_logger = logging.getLogger() console_handler = logging.StreamHandler() console_handler.setFormatter(colored_formatter) root_logger.addHandler(console_handler) # Now you can create loggers as usual, and they'll use the colored formatter logger = logging.getLogger(__name__) logger.info(\"This message will be colored\") # You can still create CustomLogger instances for specific modules custom_logger = CustomLogger.get_logger(\"custom_module\") custom_logger.warning(\"This warning uses CustomLogger directly\") [SCREENSHOT_PLACEHOLDER: integration.png] By following these examples, you should be able to make full use of the colored_custom_logger in your Python projects. Remember to adjust the log levels and formats to best suit your specific needs. For more detailed information about the CustomLogger and ColoredFormatter classes, check out the API Reference .","title":"Integration with Existing Projects"}]}